import React, { useState } from 'react'
import { useAuth } from '../contexts/AuthContext'
import { addRecipe } from '../lib/supabase'

function RecipeForm({ onSuccess, onClose }) {
  const { user } = useAuth()
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)
  const [url, setUrl] = useState('')

  // Simple URL parser for ICA.se recipes
  const parseIcaRecipe = (url) => {
    try {
      // Extract recipe ID from URL - handle trailing slash
      const cleanUrl = url.replace(/\/$/, '') // Remove trailing slash
      const urlParts = cleanUrl.split('/')
      const lastPart = urlParts[urlParts.length - 1]
      
      // Extract recipe ID from the last part
      const recipeId = lastPart.split('-').pop()
      
      
      // Mock recipe data based on URL - you can expand this with real parsing
      const mockRecipes = {
        '729067': {
          name: 'Helstekt kyckling i ugn',
          emoji: '游꼥',
          description: 'Enkelt och gott recept p친 helstekt kyckling i ugn smaksatt med honung, soja och f칛rska 칬rter.',
          type: 'dish',
          source_website: 'ICA.se',
          source_url: url,
          ingredients: [
            '1 hel kyckling (ca 1,5 kg)',
            '2 msk honung',
            '2 msk sojas친s',
            '2 klyftor vitl칬k',
            '1 msk f칛rsk rosmarin',
            '1 msk f칛rsk timjan',
            'salt och svartpeppar',
            'olja f칬r stekning'
          ],
          instructions: [
            'S칛tt ugnen p친 200춿C.',
            'Mixa honung, sojas친s, pressad vitl칬k och hackade 칬rter.',
            'Gnid kycklingen med salt och peppar.',
            'Bred p친 honungss친sen 칬ver kycklingen.',
            'Stek i ugnen i ca 60-75 minuter tills k칬ttet 칛r genomstekt.',
            'L친t vila 10 minuter innan servering.'
          ],
          prep_time: '15 min',
          cook_time: '75 min',
          total_time: '90 min',
          servings: '4',
          difficulty: 'Medium',
          cuisine: 'Svensk',
          tags: ['kyckling', 'ugn', 'huvudr칛tt']
        },
        '725504': {
          name: 'Shish kebab med pitabr칬d',
          emoji: '游볯',
          description: 'Hemlagad shish kebab med pitabr칬d, f칛rska gr칬nsaker och vitl칬kss친s.',
          type: 'dish',
          source_website: 'ICA.se',
          source_url: url,
          ingredients: [
            '500 g n칬tf칛rs',
            '1 gul l칬k',
            '2 klyftor vitl칬k',
            '1 msk spiskummin',
            '1 msk paprikapulver',
            'salt och peppar',
            '4 pitabr칬d',
            '2 tomater',
            '1 gurka',
            '1 r칬dl칬k',
            '2 dl turkisk yoghurt',
            '1 klyfta vitl칬k till s친s'
          ],
          instructions: [
            'Blanda f칛rs med finhackad l칬k, vitl칬k och kryddor.',
            'Forma sm친 k칬ttbullar eller l칛ngre kebab.',
            'Stek kebaben i olja tills de 칛r genomstekta.',
            'V칛rm pitabr칬d enligt anvisning p친 f칬rpackningen.',
            'Skiva tomater, gurka och r칬dl칬k.',
            'G칬r vitl칬kss친s: blanda yoghurt med pressad vitl칬k.',
            'L칛gg kebab, gr칬nsaker och s친s i pitabr칬det.',
            'Servera omedelbart.'
          ],
          prep_time: '20 min',
          cook_time: '15 min',
          total_time: '35 min',
          servings: '4',
          difficulty: 'Medium',
          cuisine: 'Turkisk',
          tags: ['kebab', 'pitabr칬d', 'mellan칬stern']
        },
        '750034': {
          name: 'Kr칛mig kantarellpasta med parmesan',
          emoji: '游꼫',
          description: 'Delikat pasta med kantareller, gr칛dde och parmesanost.',
          type: 'dish',
          source_website: 'ICA.se',
          source_url: url,
          ingredients: [
            '400 g pasta',
            '300 g kantareller',
            '1 gul l칬k',
            '2 klyftor vitl칬k',
            '2 dl gr칛dde',
            '1 dl parmesanost, riven',
            '2 msk sm칬r',
            'salt och peppar',
            'f칛rsk persilja'
          ],
          instructions: [
            'Koka pastan enligt anvisning p친 f칬rpackningen.',
            'Skiva kantarellerna och hacka l칬ken.',
            'Stek l칬ken i sm칬r tills den blir mjuk.',
            'Tills칛tt kantareller och l친t steka n친gra minuter.',
            'H칛ll i gr칛dden och l친t koka ihop.',
            'R칬r ner riven parmesan.',
            'Blanda med den kokta pastan.',
            'Krydda med salt, peppar och hackad persilja.'
          ],
          prep_time: '10 min',
          cook_time: '20 min',
          total_time: '30 min',
          servings: '4',
          difficulty: 'Easy',
          cuisine: 'Italiensk',
          tags: ['pasta', 'kantareller', 'svamp', 'parmesan']
        }
      }
      
      const recipe = mockRecipes[recipeId]
      if (!recipe) {
        throw new Error(`Recipe not found for ID: ${recipeId}. Supported IDs: ${Object.keys(mockRecipes).join(', ')}`)
      }
      
      return recipe
    } catch (error) {
      throw new Error(`Failed to parse recipe URL: ${error.message}`)
    }
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    if (!user) return

    setLoading(true)
    setError(null)

    try {
      // Parse the recipe from URL
      const recipeData = parseIcaRecipe(url)
      
      // Add the recipe to the database
      const { data, error: addError } = await addRecipe(user.id, recipeData)

      if (addError) {
        setError(`Failed to save recipe: ${addError.message}`)
      } else {
        onSuccess(data)
        onClose()
      }
    } catch (err) {
      setError(`Error: ${err.message}`)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="recipe-form-overlay" onClick={onClose}>
      <div className="recipe-form-modal" onClick={(e) => e.stopPropagation()}>
        <div className="form-header">
          <h2>游닇 Add New Recipe</h2>
          <button onClick={onClose} className="close-btn">
            &times;
          </button>
        </div>

        <div className="form-content">
          {error && <div className="form-error">{error}</div>}

          <form onSubmit={handleSubmit}>
            <div className="form-section">
              <h3>Import Recipe from URL</h3>
              
              <div className="form-group">
                <label htmlFor="url">Recipe URL:</label>
                <input
                  type="url"
                  id="url"
                  name="url"
                  value={url}
                  onChange={(e) => setUrl(e.target.value)}
                  placeholder="https://example.com/recipe"
                  required
                />
              </div>

              <div className="supported-sites">
                <p><strong>Supported websites:</strong></p>
                <ul>
                  <li>ICA.se - Swedish recipes</li>
                  <li>More sites coming soon...</li>
                </ul>
              </div>
            </div>

            <div className="form-actions">
              <button type="button" onClick={onClose} className="cancel-btn">
                Cancel
              </button>
              <button 
                type="submit" 
                className="submit-btn"
                disabled={loading || !url.trim()}
              >
                {loading ? 'Importing...' : 'Import Recipe'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  )
}

export default RecipeForm