const fs = require('fs');

// Function to clean up duplicated Chinese words in ingredient strings
function cleanDuplicatedIngredients(ingredientString) {
  if (!ingredientString || typeof ingredientString !== 'string') {
    return ingredientString;
  }
  
  let result = ingredientString;
  
  // Remove duplicated Chinese words (common patterns)
  const duplicatedPatterns = [
    // Pattern: "2 ÁîúÊ§í ÁîúÊ§í" -> "2 ÁîúÊ§í"
    /(\d+)\s*(\w+)\s*\2/g,
    // Pattern: "1 Ê±§Âåô Êñ∞È≤ú Âßú" -> "1 Ê±§Âåô Âßú" (remove redundant "Êñ∞È≤ú")
    /(\d+)\s*(\w+)\s*Êñ∞È≤ú\s*(\w+)/g,
    // Pattern: "1 Á£Ö Áå™ËÇâ ÊéíÈ™®" -> "1 Á£Ö ÊéíÈ™®" (remove redundant "Áå™ËÇâ")
    /(\d+)\s*(\w+)\s*Áå™ËÇâ\s*(\w+)/g,
    // Pattern: "1 Á£Ö ÁªûËÇâ Áå™ËÇâ" -> "1 Á£Ö ÁªûËÇâ"
    /(\d+)\s*(\w+)\s*ÁªûËÇâ\s*Áå™ËÇâ/g,
    // Pattern: "1 ‰∏≠Á≠â Ê¥ãËë±" -> "1 Ê¥ãËë±" (remove redundant "‰∏≠Á≠â")
    /(\d+)\s*‰∏≠Á≠â\s*(\w+)/g,
    // Pattern: "4 ‰∏ÅÈ¶ô Â§ßËíú" -> "4 Áì£ Â§ßËíú" (fix unit)
    /(\d+)\s*‰∏ÅÈ¶ô\s*(\w+)/g
  ];
  
  // Apply cleaning patterns
  result = result.replace(/(\d+)\s*(\w+)\s*\2/g, '$1 $2'); // Remove duplicated words
  result = result.replace(/(\d+)\s*(\w+)\s*Êñ∞È≤ú\s*(\w+)/g, '$1 $2 $3'); // Remove "Êñ∞È≤ú"
  result = result.replace(/(\d+)\s*(\w+)\s*Áå™ËÇâ\s*(\w+)/g, '$1 $2 $3'); // Remove redundant "Áå™ËÇâ"
  result = result.replace(/(\d+)\s*(\w+)\s*ÁªûËÇâ\s*Áå™ËÇâ/g, '$1 $2 ÁªûËÇâ'); // Fix "ÁªûËÇâ Áå™ËÇâ"
  result = result.replace(/(\d+)\s*‰∏≠Á≠â\s*(\w+)/g, '$1 $2'); // Remove "‰∏≠Á≠â"
  result = result.replace(/(\d+)\s*‰∏ÅÈ¶ô\s*(\w+)/g, '$1 Áì£ $2'); // Fix "‰∏ÅÈ¶ô" to "Áì£"
  
  // Clean up extra spaces
  result = result.replace(/\s+/g, ' ').trim();
  
  return result;
}

// Function to process recipe file
function processRecipeFile(filePath) {
  console.log(`Processing ${filePath}...`);
  
  try {
    const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
    let changesCount = 0;
    
    // Process cultural recipes
    if (data.cultural) {
      Object.keys(data.cultural).forEach(cuisine => {
        if (Array.isArray(data.cultural[cuisine])) {
          data.cultural[cuisine].forEach(recipe => {
            // Clean ingredients with amounts
            if (recipe.ingredientsWithAmounts && Array.isArray(recipe.ingredientsWithAmounts)) {
              recipe.ingredientsWithAmounts = recipe.ingredientsWithAmounts.map(ingredient => {
                const newIngredient = cleanDuplicatedIngredients(ingredient);
                if (newIngredient !== ingredient) {
                  changesCount++;
                }
                return newIngredient;
              });
            }
          });
        }
      });
    }
    
    // Write back to file
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf8');
    console.log(`‚úÖ ${filePath}: ${changesCount} changes made`);
    
    return changesCount;
  } catch (error) {
    console.error(`‚ùå Error processing ${filePath}:`, error.message);
    return 0;
  }
}

// Main execution
console.log('üîß CLEANING DUPLICATED INGREDIENT PATTERNS');
console.log('‚ïê'.repeat(50));

const zhFile = 'src/locales/zh/recipes.json';

let totalChanges = 0;

// Process Chinese recipes
if (fs.existsSync(zhFile)) {
  totalChanges += processRecipeFile(zhFile);
} else {
  console.log(`‚ùå File not found: ${zhFile}`);
}

console.log('');
console.log('üéâ DUPLICATED INGREDIENT CLEANUP COMPLETE!');
console.log(`üìä Total changes made: ${totalChanges}`);
console.log('');
console.log('‚ú® All duplicated Chinese words in ingredient strings have been cleaned!');
console.log('üß™ Test the recipe display to verify clean ingredient formatting.');
