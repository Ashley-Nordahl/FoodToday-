const fs = require('fs');

// Comprehensive English to Chinese translation for cooking instructions
const instructionTranslations = {
  // Common cooking verbs
  'add': 'Âä†', 'heat': 'Âä†ÁÉ≠', 'cook': 'ÁÉπÈ•™', 'stir': 'ÊêÖÊãå', 'mix': 'Ê∑∑Âêà',
  'combine': 'ÁªìÂêà', 'pour': 'ÂÄí', 'remove': 'ÁßªÈô§', 'set': 'Êîæ', 'aside': '‰∏ÄËæπ',
  'return': 'ËøîÂõû', 'toss': 'ÊêÖÊãå', 'form': 'ÂΩ¢Êàê', 'cut': 'Âàá', 'slice': 'ÂàáÁâá',
  'chop': 'ÂàáÁ¢é', 'dice': 'Âàá‰∏Å', 'mince': 'ÂâÅÁ¢é', 'grate': 'Á£®Á¢é', 'shred': 'Âàá‰∏ù',
  'peel': 'ÂéªÁöÆ', 'wash': 'Ê¥ó', 'clean': 'Ê∏ÖÊ¥Å', 'drain': 'Ê≤•Âπ≤', 'rinse': 'ÂÜ≤Ê¥ó',
  'boil': 'ÁÖÆÊ≤∏', 'simmer': 'ÁÇñ', 'fry': 'ÁÇ∏', 'saut√©': 'ÁÇí', 'stir-fry': 'ÁÇí',
  'deep-fry': 'ÁÇ∏', 'pan-fry': 'ÁÖé', 'grill': 'ÁÉ§', 'roast': 'ÁÉ§Âà∂', 'bake': 'ÁÉòÁÉ§',
  'steam': 'Ëí∏', 'braise': 'ÁÇñ', 'marinate': 'ËÖåÂà∂', 'season': 'Ë∞ÉÂë≥', 'salt': 'Áõê',
  'pepper': 'ËÉ°Ê§í', 'taste': 'ÂìÅÂ∞ù', 'adjust': 'Ë∞ÉÊï¥', 'serve': 'ÊúçÂä°', 'garnish': 'Ë£ÖÈ•∞',
  
  // Common cooking terms
  'until': 'Áõ¥Âà∞', 'about': 'Â§ßÁ∫¶', 'minutes': 'ÂàÜÈíü', 'hours': 'Â∞èÊó∂', 'seconds': 'Áßí',
  'medium': '‰∏≠Á≠â', 'high': 'È´ò', 'low': '‰Ωé', 'hot': 'ÁÉ≠', 'cold': 'ÂÜ∑', 'warm': 'Ê∏©',
  'temperature': 'Ê∏©Â∫¶', 'heat': 'ÁÅ´', 'flame': 'ÁÅ´ÁÑ∞', 'pan': 'Âπ≥Â∫ïÈîÖ', 'pot': 'ÈîÖ',
  'wok': 'ÁÇíÈîÖ', 'bowl': 'Á¢ó', 'plate': 'ÁõòÂ≠ê', 'spoon': 'Âã∫Â≠ê', 'fork': 'ÂèâÂ≠ê',
  'knife': 'ÂàÄ', 'cutting': 'Âàá', 'board': 'Êùø', 'oil': 'Ê≤π', 'butter': 'ÈªÑÊ≤π',
  'water': 'Ê∞¥', 'broth': 'Ê±§', 'stock': 'È´òÊ±§', 'sauce': 'ÈÖ±', 'dressing': 'Ë∞ÉÊñô',
  'marinade': 'ËÖåÊñô', 'seasoning': 'Ë∞ÉÂë≥Êñô', 'spice': 'È¶ôÊñô', 'herb': 'È¶ôËçâ',
  
  // Descriptive terms
  'golden': 'ÈáëÈªÑ', 'brown': 'Ê£ïËâ≤', 'crispy': 'ÈÖ•ËÑÜ', 'tender': 'Â´©', 'soft': 'ËΩØ',
  'firm': 'ÁªìÂÆû', 'thick': 'Âéö', 'thin': 'ËñÑ', 'smooth': 'ÂÖâÊªë', 'rough': 'Á≤óÁ≥ô',
  'thickens': 'ÂèòÁ®†', 'reduces': 'ÂáèÂ∞ë', 'bubbles': 'ÂÜíÊ≥°', 'boils': 'Ê≤∏ËÖæ',
  'simmering': 'ÁÇñÁÖÆ', 'sizzling': 'ÊªãÊªã‰ΩúÂìç', 'steaming': 'Ëí∏', 'smoking': 'ÂÜíÁÉü',
  
  // Time and quantity terms
  'everything': '‰∏ÄÂàá', 'together': '‰∏ÄËµ∑', 'all': 'ÊâÄÊúâ', 'both': '‰∏§ËÄÖ', 'each': 'ÊØè‰∏™',
  'some': '‰∏Ä‰∫õ', 'more': 'Êõ¥Â§ö', 'less': 'Êõ¥Â∞ë', 'enough': 'Ë∂≥Â§ü', 'too': 'Â§™',
  'very': 'ÈùûÂ∏∏', 'quite': 'Áõ∏ÂΩì', 'rather': 'Áõ∏ÂΩì', 'quite': 'Áõ∏ÂΩì', 'enough': 'Ë∂≥Â§ü',
  'almost': 'Âá†‰πé', 'nearly': 'Âá†‰πé', 'just': 'Âè™ÊòØ', 'only': 'Âè™Êúâ', 'first': 'È¶ñÂÖà',
  'next': 'ÁÑ∂Âêé', 'then': 'ÁÑ∂Âêé', 'finally': 'ÊúÄÂêé', 'last': 'ÊúÄÂêé', 'begin': 'ÂºÄÂßã',
  'start': 'ÂºÄÂßã', 'end': 'ÁªìÊùü', 'finish': 'ÂÆåÊàê', 'complete': 'ÂÆåÊàê', 'done': 'ÂÆåÊàê',
  
  // Common phrases
  'set aside': 'ÊîæÂú®‰∏ÄËæπ', 'return to': 'ËøîÂõûÂà∞', 'add to': 'Ê∑ªÂä†Âà∞', 'mix well': 'ÂÖÖÂàÜÊ∑∑Âêà',
  'stir constantly': '‰∏çÊñ≠ÊêÖÊãå', 'cook until': 'ÁÖÆËá≥', 'heat through': 'Âä†ÁÉ≠ÈÄè',
  'bring to': 'ÁÖÆËá≥', 'reduce heat': 'Èôç‰ΩéÁÅ´Âäõ', 'increase heat': 'ÊèêÈ´òÁÅ´Âäõ',
  'turn off': 'ÂÖ≥Èó≠', 'turn on': 'ÊâìÂºÄ', 'remove from': '‰ªé...ÁßªÈô§', 'place in': 'ÊîæÂú®',
  'cover with': 'Áî®...Ë¶ÜÁõñ', 'uncover': 'Êè≠ÂºÄ', 'let rest': 'ÈùôÁΩÆ', 'let cool': 'ÂÜ∑Âç¥',
  
  // Specific cooking instructions
  'brown on all sides': 'ÂêÑÈù¢ÁÖéËá≥Ê£ïËâ≤', 'cook through': 'ÁÖÆÈÄè', 'heat through': 'Âä†ÁÉ≠ÈÄè',
  'bring to boil': 'ÁÖÆËá≥Ê≤∏ËÖæ', 'reduce to simmer': 'Ë∞ÉÂ∞èÁÅ´ÁÇñ', 'stir occasionally': 'ÂÅ∂Â∞îÊêÖÊãå',
  'stir frequently': 'ÁªèÂ∏∏ÊêÖÊãå', 'stir constantly': '‰∏çÊñ≠ÊêÖÊãå', 'do not stir': '‰∏çË¶ÅÊêÖÊãå',
  'cover and cook': 'Áõñ‰∏äÁõñÂ≠êÁÖÆ', 'uncover and cook': 'Êè≠ÂºÄÁõñÂ≠êÁÖÆ', 'let simmer': 'Â∞èÁÅ´ÁÇñ',
  'bring to room temperature': 'ËææÂà∞ÂÆ§Ê∏©', 'chill in refrigerator': 'ÂÜ∑Ëóè',
  
  // Common words that appear in instructions
  'the': '', 'a': '‰∏Ä‰∏™', 'an': '‰∏Ä‰∏™', 'and': 'Âíå', 'or': 'Êàñ', 'with': 'ÈÖç', 'in': 'Âú®',
  'on': 'Âú®', 'at': 'Âú®', 'by': 'Áî±', 'for': '‰∏∫', 'to': 'Âà∞', 'from': '‰ªé', 'of': 'ÁöÑ',
  'is': 'ÊòØ', 'are': 'ÊòØ', 'was': 'ÊòØ', 'were': 'ÊòØ', 'be': 'ÊòØ', 'been': 'ÊòØ', 'being': 'ÊòØ',
  'have': 'Êúâ', 'has': 'Êúâ', 'had': 'Êúâ', 'having': 'Êúâ', 'do': 'ÂÅö', 'does': 'ÂÅö',
  'did': 'ÂÅö', 'doing': 'ÂÅö', 'will': 'Â∞Ü', 'would': 'Â∞Ü', 'could': 'ËÉΩ', 'should': 'Â∫îËØ•',
  'may': 'ÂèØËÉΩ', 'might': 'ÂèØËÉΩ', 'can': 'ËÉΩ', 'must': 'ÂøÖÈ°ª', 'shall': 'Â∞Ü'
};

// Function to translate mixed language instructions
function translateInstruction(instruction) {
  if (!instruction || typeof instruction !== 'string') {
    return instruction;
  }
  
  let result = instruction;
  
  // Sort translation keys by length (longest first) to handle compound phrases
  const sortedKeys = Object.keys(instructionTranslations).sort((a, b) => b.length - a.length);
  
  // Replace English words with Chinese translations
  sortedKeys.forEach(englishWord => {
    const translation = instructionTranslations[englishWord];
    if (translation) {
      // Use word boundary regex to ensure we only replace whole words
      const regex = new RegExp(`\\b${englishWord}\\b`, 'gi');
      result = result.replace(regex, translation);
    }
  });
  
  // Clean up extra spaces and punctuation
  result = result.replace(/\s+/g, ' ').trim();
  result = result.replace(/\s*,\s*/g, ', ');
  result = result.replace(/\s*\.\s*/g, '. ');
  result = result.replace(/\s*\?\s*/g, '? ');
  result = result.replace(/\s*!\s*/g, '! ');
  
  return result;
}

// Function to process recipe file
function processRecipeFile(filePath) {
  console.log(`Processing ${filePath}...`);
  
  try {
    const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
    let changesCount = 0;
    
    // Process cultural recipes
    if (data.cultural) {
      Object.keys(data.cultural).forEach(cuisine => {
        if (Array.isArray(data.cultural[cuisine])) {
          data.cultural[cuisine].forEach(recipe => {
            // Fix recipe name
            if (recipe.name) {
              const newName = translateInstruction(recipe.name);
              if (newName !== recipe.name) {
                recipe.name = newName;
                changesCount++;
              }
            }
            
            // Fix instructions
            if (recipe.instructions && Array.isArray(recipe.instructions)) {
              recipe.instructions = recipe.instructions.map(instruction => {
                const newInstruction = translateInstruction(instruction);
                if (newInstruction !== instruction) {
                  changesCount++;
                }
                return newInstruction;
              });
            }
          });
        }
      });
    }
    
    // Write back to file
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf8');
    console.log(`‚úÖ ${filePath}: ${changesCount} changes made`);
    
    return changesCount;
  } catch (error) {
    console.error(`‚ùå Error processing ${filePath}:`, error.message);
    return 0;
  }
}

// Main execution
console.log('üîß FIXING INSTRUCTIONS MIXED LANGUAGE CONTENT');
console.log('‚ïê'.repeat(50));

const zhFile = 'src/locales/zh/recipes.json';

let totalChanges = 0;

// Process Chinese recipes
if (fs.existsSync(zhFile)) {
  totalChanges += processRecipeFile(zhFile);
} else {
  console.log(`‚ùå File not found: ${zhFile}`);
}

console.log('');
console.log('üéâ INSTRUCTIONS MIXED LANGUAGE FIX COMPLETE!');
console.log(`üìä Total changes made: ${totalChanges}`);
console.log('');
console.log('‚ú® All mixed language content in instructions has been fixed!');
console.log('üß™ Test the recipe display to verify complete language consistency.');
